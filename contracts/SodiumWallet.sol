// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/cryptography/ECDSA.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol";
import "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol";
import "@openzeppelin/contracts/token/ERC1155/IERC1155.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";

import "./interfaces/ISodiumWallet.sol";
import "./interfaces/ISodiumRegistry.sol";
import "./libraries/Types.sol";

/// @notice Smart wallet to hold loan collateral on the Sodium Protocol
/// @dev This contract is deployed as the implementation for proxy wallets
contract SodiumWallet is
    ISodiumWallet,
    Initializable,
    ERC721Holder,
    ERC1155Holder
{
    /* ===== STATE ===== */

    // Wallet owner
    address private borrower;

    // Sodium Core address
    address private core;

    // Sodium Registry address
    address private registry;

    /* ===== MODIFIERS ===== */

    modifier onlyCore() {
        require(msg.sender == core, "Sodium Wallet: Core only");
        _;
    }

    modifier onlyBorrower() {
        require(msg.sender == borrower, "Sodium Wallet: Borrower only");
        _;
    }

    /* ===== INITIALIZER ===== */

    /// @param borrower_ The owner of this wallet
    /// @param core_ The address of the Core
    /// @param registry_ Used by the wallets to determine external call permission
    function initialize(
        address borrower_,
        address core_,
        address registry_
    ) external override initializer {
        borrower = borrower_;
        core = core_;
        registry = registry_;
    }

    /* ===== RECEIVE ===== */

    // Allows borrower to send ETH to the wallet
    receive() external payable {}

    /* ==================== BORROWER METHODS ==================== */

    /// @notice Used by borrower to make calls with their Sodium wallet
    /// @dev Uses `registry` to determine call (address & function selector) permission
    /// @param contractAddresses An in-order array of the addresses to which the calls are to be made
    /// @param calldatas The in-order calldatas to be used during those calls (elements at same index correspond)
    /// @param values The in-order Wei amounts to be sent with those calls (again elements at same index correspond)
    function execute(
        address[] calldata contractAddresses,
        bytes[] memory calldatas,
        uint256[] calldata values
    ) external payable override onlyBorrower {
        // Flash loan calls
        for (uint256 i = 0; i < contractAddresses.length; i++) {
            bytes memory cd = calldatas[i];

            // Get function signature from calldata
            bytes4 signature;
            assembly {
                signature := mload(add(cd, 32))
            }

            // Check call permission via the registry
            require(
                ISodiumRegistry(registry).getCallPermission(
                    contractAddresses[i],
                    signature
                ),
                "Sodium Wallet: Non-permitted call"
            );

            // Perform call
            (bool success, ) = contractAddresses[i].call{value: values[i]}(
                calldatas[i]
            );

            require(success, "Sodium Wallet: Call failed");
        }
    }

    /// @notice Used by borrower to withdraw ETH from the wallet
    /// @param amount The amount of ETH (in Wei) to withdraw
    function withdrawETH(uint256 amount) external onlyBorrower {
        payable(msg.sender).transfer(amount);
    }

    /* ==================== EIP-1271 ==================== */

    /// @notice EIP-1271 implementation that validates signatures generated by the borrower
    function isValidSignature(bytes32 hash, bytes memory signature)
        external
        view
        override
        returns (bytes4)
    {
        address signer = ECDSA.recover(hash, signature);

        require(
            signer == borrower,
            "Sodium Wallet: Signature must be made by borrower "
        );

        return 0x1626ba7e;
    }

    /* ==================== CORE METHODS ==================== */

    /// @notice Called by core to transfer an ERC721 token held in wallet
    function transferERC721(
        address recipient,
        address tokenAddress,
        uint256 tokenId
    ) external override onlyCore {
        // Send Collateral
        IERC721(tokenAddress).transferFrom(address(this), recipient, tokenId);
    }

    /// @notice Called by core to transfer an ERC1155 token held in wallet
    function transferERC1155(
        address recipient,
        address tokenAddress,
        uint256 tokenId
    ) external override onlyCore {
        // Send collateral
        IERC1155(tokenAddress).safeTransferFrom(
            address(this),
            recipient,
            tokenId,
            1,
            ""
        );
    }
}
